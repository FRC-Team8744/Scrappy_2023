// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  public final LEDLights m_lightbar = new LEDLights();
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    public final SWrist m_sWrist = new SWrist();
    public final SExtendElevator m_sExtendElevator = new SExtendElevator();
    public final SLiftArm m_sLiftArm = new SLiftArm();
    public final SGripper m_sGripper = new SGripper();
    public final Drivetrain m_drivetrain = new Drivetrain();

// Joysticks
private final Joystick gamePad = new Joystick(1);
private final Joystick joystick1 = new Joystick(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// private final ChangeLED toggleLed = new ChangeLED(m_lightbar);
  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  
  private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand( m_drivetrain ));
    SmartDashboard.putData("TeleopDrive: Joystick", new TeleopDrive(() -> getJoystick1().getY(), () -> getJoystick1().getZ(), () -> getJoystick1().getRawAxis(3), m_drivetrain));
    SmartDashboard.putData("ChangeLED", new ChangeLED(m_lightbar, 0, 0, 0));
    SmartDashboard.putData("Gripper: GripperOpenPreset", new Gripper(10, m_sGripper));
    SmartDashboard.putData("Gripper: GripperClosePreset", new Gripper(0, m_sGripper));
    SmartDashboard.putData("Lift Arm: LiftArmHighPreset", new LiftArm(10, m_sLiftArm));
    SmartDashboard.putData("Lift Arm: LiftArmLowPreset", new LiftArm(0, m_sLiftArm));
    SmartDashboard.putData("ExtendElevator: ExtendElevatorHighPreset", new ExtendElevator(10, m_sExtendElevator));
    SmartDashboard.putData("ExtendElevator: ExtendElevatorLowPreset", new ExtendElevator(0, m_sExtendElevator));
    SmartDashboard.putData("Wrist: OpenPreset", new Wrist(10, m_sWrist));
    SmartDashboard.putData("Wrist: ClosePreset", new Wrist(0, m_sWrist));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // m_lightbar, 0, 0, 0
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    m_drivetrain.setDefaultCommand(new AutonomousCommand(m_drivetrain));

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_sWrist.setDefaultCommand(new Wrist(0, m_sWrist));
    m_sExtendElevator.setDefaultCommand(new ExtendElevator(0, m_sExtendElevator));
    m_sLiftArm.setDefaultCommand(new LiftArm(0, m_sLiftArm));
    m_sGripper.setDefaultCommand(new Gripper(0, m_sGripper));
    m_drivetrain.setDefaultCommand(new TeleopDrive(() -> getJoystick1().getY(), () -> getJoystick1().getZ(), () -> getJoystick1().getRawAxis(3), m_drivetrain));


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.addOption("Gripper: GripperOpenPreset", new Gripper(10, m_sGripper));
    m_chooser.addOption("Gripper: GripperClosePreset", new Gripper(0, m_sGripper));
    m_chooser.addOption("Lift Arm: LiftArmHighPreset", new LiftArm(10, m_sLiftArm));
    m_chooser.addOption("Lift Arm: LiftArmLowPreset", new LiftArm(0, m_sLiftArm));
    m_chooser.addOption("ExtendElevator: ExtendElevatorHighPreset", new ExtendElevator(10, m_sExtendElevator));
    m_chooser.addOption("ExtendElevator: ExtendElevatorLowPreset", new ExtendElevator(0, m_sExtendElevator));
    m_chooser.addOption("Wrist: OpenPreset", new Wrist(10, m_sWrist));
    m_chooser.addOption("Wrist: ClosePreset", new Wrist(0, m_sWrist));
    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand( m_drivetrain ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
// Create some buttons
final JoystickButton wristClose = new JoystickButton(gamePad, 8);        
wristClose.onTrue(new Wrist(0, m_sWrist).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton elevatorExtentionLow = new JoystickButton(gamePad, 7);        
elevatorExtentionLow.onTrue(new ExtendElevator(0, m_sExtendElevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton liftArmLow = new JoystickButton(gamePad, 6);        
liftArmLow.onTrue(new LiftArm(0, m_sLiftArm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton gripperClose = new JoystickButton(gamePad, 5);        
gripperClose.onTrue(new Gripper(0, m_sGripper).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton wristOpen = new JoystickButton(gamePad, 4);        
wristOpen.onTrue(new Wrist(10, m_sWrist).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("WristOpen",new Wrist(10, m_sWrist));
                        
final JoystickButton extendElevatorHigh = new JoystickButton(gamePad, 3);        
extendElevatorHigh.onTrue(new ExtendElevator(10, m_sExtendElevator).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("ExtendElevatorHigh",new ExtendElevator(10, m_sExtendElevator));
                        
final JoystickButton liftArmHigh = new JoystickButton(gamePad, 2);        
liftArmHigh.onTrue(new LiftArm(10, m_sLiftArm).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("LiftArmHigh",new LiftArm(10, m_sLiftArm));
                        
final JoystickButton gripperOpen = new JoystickButton(gamePad, 1);        
gripperOpen.onTrue(new Gripper(10, m_sGripper).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("GripperOpen",new Gripper(10, m_sGripper));
                        
final JoystickButton joystickButton1 = new JoystickButton(joystick1, 7);        
joystickButton1.onTrue(new ChangeLED(m_lightbar, 0xFF, 0xAA, 0x00).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("Joystick Button 1",new ChangeLED(m_lightbar, 0xFF, 0xAA, 0x00));
                        


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // m_lightbar, 0xFF, 0xAA, 0x00
    final JoystickButton joystickButton2 = new JoystickButton(joystick1, 8);        
joystickButton2.onTrue(new ChangeLED(m_lightbar, 128, 0, 128).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("Joystick Button 2",new ChangeLED(m_lightbar, 128, 0, 128));
     final JoystickButton joystickButton3 = new JoystickButton(joystick1, 9);        
joystickButton3.onTrue(new ChangeLED(m_lightbar, 0, 0, 0).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        SmartDashboard.putData("Joystick Button 3",new ChangeLED(m_lightbar, 0, 0, 0));
    // m_lightbar, 0, 0, 0
    


  }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getJoystick1() {
        return joystick1;
    }

public Joystick getGamePad() {
        return gamePad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

